<project
	xmlns:maven="jelly:maven"
	xmlns:jar="jelly:jar"
	xmlns:j="jelly:core" 
	xmlns:util="jelly:util" 
	xmlns:ant="jelly:ant"
	xmlns:artifact="artifact"
	xmlns:define="jelly:define"
	xmlns:bundleinfo="bundleinfo">

  <!--==================================================================-->
  <!-- Default goal : Builds a war file                                 -->
  <!--==================================================================-->
  <goal name="osgi" prereqs="osgi:sign"
  	description="Build an OSGi jar file"/>
  
  <!--==================================================================-->
  <!-- Definitions                                                      -->
  <!--==================================================================-->  
  <define:taglib uri="bundleinfo">
    <define:jellybean
      name="bundleinfo"
      className="osgi.maven.BundleInfo"
      method="doExecute"
    />
    <define:jellybean
      name="bundlesecurity"
      className="osgi.maven.BundleSecurity"
      method="doExecute"
    />
    <define:jellybean
      name="thirdparty"
      className="osgi.maven.BundleInfo"
      method="thirdparty"
    />
    <define:jellybean
      name="thirdparty-obr"
      className="osgi.maven.BundleInfo"
      method="thirdpartyOBR"
    />
  </define:taglib>

  <!--==================================================================-->
  <!-- Helper-goals                                                     -->
  <!--==================================================================-->  
  <ant:tstamp>
    <ant:format property = "bundle.date" 
            pattern  = "EE MMMM d yyyy, HH:mm:ss"
            locale   = "en"/>
   </ant:tstamp>

  <!--==================================================================-->
  <!-- Install the osgi in the local repository                         -->
  <!--==================================================================-->    
  <goal name="osgi:install"
        prereqs="osgi:sign"
        description="Install the osgi jar in the local repository">
 
     <artifact:install
        artifact="${maven.osgi.final.name}"
        type="jar"
        project="${pom}"/> 
          
  	<ant:echo>Deploying OBR File:</ant:echo>
	<ant:copy file="${maven.osgi.obr.name}" todir="${maven.repo.local}/${pom.groupId}/obrs" />
  	
  </goal>
  
  <!--==================================================================-->
  <!-- Deploy an OSGi bundle to the remote repository                   -->
  <!--==================================================================-->  
  <goal
    name="osgi:deploy"
    prereqs="osgi:sign"
    description="Deploy an OSGi bundle to the remote repository">

    <artifact:deploy
      artifact="${maven.build.dir}/${maven.final.name}.jar"
      type="jar"
      project="${pom}"
    />
    
    <attainGoal name="obr:deploy" />
    
  </goal>
  
  <goal name="obr:deploy"
    	prereqs="osgi:init"
    	description="Deploy the OBR to the remote repository">

	<j:set var="username" value='${context.getVariable("maven.username")}'/>

	<j:set var="copier" value='${context.getVariable("maven.scp.executable")}'/>
    
      <!--
        ||
        || Make sure the destination directory exists.
        ||
      -->
      
      <j:set var="distributionSiteX" value="${pom.distributionSite}X"/>
      <j:choose>
        <j:when test="${distributionSiteX != 'X'}">
          <j:set var="siteAddress" value="${pom.distributionSite}"/>
          <j:set var="siteDirectory" value="${pom.distributionDirectory}"/>
        </j:when>
        <j:otherwise>
          <j:set var="siteAddress" value='${context.getVariable("maven.repo.central")}'/>
          <j:set var="siteDirectory" value='${context.getVariable("maven.repo.central.directory")}'/>
        </j:otherwise>
      </j:choose>
      
      <j:set 
        var="resolvedDirectory" 
        value="${siteDirectory}/${pom.groupId}/obrs"
      />
      
      <j:set var="assureDirectoryCommandX" value="${assureDirectoryCommand}X"/>
      
      <j:set var="line" value="${maven.scp.args} ${maven.osgi.obr.name} ${username}@${siteAddress}:${resolvedDirectory}"/>
      
      <ant:echo>copied file to remote repo: ${line}</ant:echo>
      
    <ant:exec dir="." executable="${copier}">
      <ant:arg line="${line}"/>
    </ant:exec>

  </goal>
  
    <goal name="opd:deploy"
    	description="Deploy the OPD to the remote repository">

	   <j:set var="maven.osgi.opd.name" 
	      value="./${maven.final.name}.opd"/>

		<j:set var="username" value='${context.getVariable("maven.username")}'/>

		<j:set var="copier" value='${context.getVariable("maven.scp.executable")}'/>
    
      	<!--
        ||
        || Make sure the destination directory exists.
        ||
      	-->
      
      	<j:set var="distributionSiteX" value="${pom.distributionSite}X"/>
      	<j:choose>
        	<j:when test="${distributionSiteX != 'X'}">
        		<j:set var="siteAddress" value="${pom.distributionSite}"/>
          		<j:set var="siteDirectory" value="${pom.distributionDirectory}"/>
        	</j:when>
        	<j:otherwise>
          		<j:set var="siteAddress" value='${context.getVariable("maven.repo.central")}'/>
          		<j:set var="siteDirectory" value='${context.getVariable("maven.repo.central.directory")}'/>
        	</j:otherwise>
      	</j:choose>
      
      	<j:set 
        	var="resolvedDirectory" 
        	value="${siteDirectory}/${pom.groupId}/opds"
      	/>
      
      	<j:set var="assureDirectoryCommandX" value="${assureDirectoryCommand}X"/>
      
      	<j:set var="line" value="${maven.scp.args} ${maven.osgi.opd.name} ${username}@${siteAddress}:${resolvedDirectory}"/>
      
      	<ant:echo>copdied file to remote repo: ${line}</ant:echo>
      
	    <ant:exec dir="." executable="${copier}">
	      <ant:arg line="${line}"/>
	    </ant:exec>
	
	  </goal>
  
  <!--==================================================================-->
  <!-- Builds an OSGi jar file                                          -->
  <!--==================================================================-->

  <goal name="osgi:init" 
    description="Initialize filesystem and other resources for an osgi build">

   <j:set var="maven.osgi.final.name" 
      value="${maven.build.dir}/${maven.final.name}.jar"/>
      
   <j:set var="maven.osgi.obr.name" 
      value="${maven.build.dir}/${maven.final.name}.obr"/>

  </goal>
  
  <goal name="osgi:sign" prereqs="osgi:jar" description="Sign the osgi bundle">
  	
  	<ant:echo>Signing OSGi jar ${maven.final.name}</ant:echo>
  	
  	<bundleinfo:bundlesecurity
  		var="bs"
  		jarName="${maven.osgi.final.name}"
  		obrName="${maven.osgi.obr.name}"
		digestGenAlgo="${osgi.maven.security.digestGenerationAlgorithm}"
		provider="${osgi.maven.security.provider}"
		keyStoreLocation="${osgi.maven.security.keystoreLocation}"
		keyStoreAlias="${osgi.maven.security.keystoreAlias}"
		keyPassword="${osgi.maven.security.keyPassword}"
		repoLocation="${maven.repo.local}"
  	/>
  	
  </goal>
  
  <goal name="osgi:jar" prereqs="osgi:init,java:jar" description="Build an OSGi jar file">

    <ant:echo>Building OSGi jar ${maven.final.name}</ant:echo>

    <ant:available property="maven.osgi.manifest.available"
      file="${maven.osgi.manifest}"/>

    <!-- jar task used for now due to problems with ejb jar not including 
         files other than class files -->
    <ant:jar
      jarfile="${maven.osgi.final.name}"
      index="${maven.osgi.index}">
      
      <j:if test="${maven.osgi.manifest.available}">
        <ant:setProperty name="manifest" value="${maven.osgi.manifest}" />
      </j:if>


      <ant:manifest>
        <ant:attribute name="Built-By" value="${user.name}"/>
        <ant:attribute name="Created-By" value="Apache Jakarta Maven"/>
        <!--<ant:attribute name="Package" value="${pom.package}"/>-->
           	

      	<!--==================================================-->
      	<!-- generate the import, export, bundleactivator     -->
      	<!--==================================================-->
		<bundleinfo:bundleinfo
			var="bi"
			artifactGroup="${pom.groupId}"
			artifactId="${pom.artifactId}"
			rtclpath="${osgi.runtime.library}"
			artifactVersion="${pom.currentVersion}"
			apivendor="${pom.getProperty('obr.bundle.apivendor')}"
			category="${pom.getProperty('osgi.bundle.category')}"
			updateLocation="${obr.bundle.updatelocation}"
			srcurl="${pom.getProperty('obr.bundle.srcurl')}"
			docurl="${pom.getProperty('obr.bundle.docurl')}"
			vendor="${pom.organization.name}"
			bundleDir="${maven.build.dir}"
			repositoryLocal="${maven.repo.local}"
			project="${pom}"
		/>

      	<!--==================================================-->
      	<!-- OSGi-Extensions related to the standard manifest -->
      	<!--==================================================-->
      	<!-- osgie.manifest.mainclass -->
      	<j:if test="${pom.getProperty('osgie.manifest.mainclass')!=null}">
      		<ant:attribute name = "Main-Class"      value = "${pom.getProperty('osgie.manifest.mainclass')}"/>
      	</j:if>
      	
      	<!--==================================================-->
      	<!-- OSGi-Standard properties                         -->
      	<!--==================================================-->
      	<!-- osgi.bundle.vendor -->
      	<j:if test="${pom.organization.name!=null}">
      		<j:set var="bundle_vendor" value="${pom.organization.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.vendor')!=null}">
      		<j:set var="bundle_vendor" value = "${pom.getProperty('osgi.bundle.vendor')}"/>
      	</j:if>
      	<j:if test="${bundle_vendor!=null}">
      		<ant:attribute name = "Bundle-Vendor"      value = "${bundle_vendor}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.docurl -->
      	<j:if test="${pom.organization.url!=null}">
      		<j:set var="bundle_docurl" value="${pom.organization.url}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.docurl')!=null}">
      		<j:set var="bundle_docurl" value = "${pom.getProperty('osgi.bundle.docurl')}"/>
      	</j:if>
      	<j:if test="${bundle_docurl!=null}">
      		<ant:attribute name = "Bundle-DocURL"      value = "${bundle_docurl}"/>
      	</j:if>      	
      	
      	<!-- osgi.bundle.version -->
      	<j:if test="${pom.currentVersion!=null}">
      		<j:set var="bundle_version" value="${pom.currentVersion}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.version')!=null}">
      		<j:set var="bundle_version" value="${pom.getProperty('osgi.bundle.version')}" />
      	</j:if>
      	<j:if test="${bundle_version!=null}">
      		<ant:attribute name = "Bundle-Version"      value = "${bundle_version}"/>
      	</j:if>
      	

      	<!-- osgi.bundle.name -->
      	<j:if test="${pom.name!=null}">
      		<j:set var="bundle_name" value="${pom.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.name')!=null}">
      		<j:set var="bundle_name" value = "${pom.getProperty('osgi.bundle.name')}"/>
      	</j:if>
      	<j:if test="${bundle_name!=null}">
      		<ant:attribute name = "Bundle-Name"      value = "${bundle_name}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.description -->
      	<j:if test="${pom.shortDescription!=null}">
      		<j:set var="bundle_desc" value="${pom.shortDescription}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.description')!=null}">
      		<j:set var="bundle_desc" value = "${pom.getProperty('osgi.bundle.description')}"/>
      	</j:if>
      	<j:if test="${bundle_desc!=null}">
      		<ant:attribute name = "Bundle-Description"      value = "${bundle_desc}"/>
      	</j:if>
      	      	
      	<!-- osgi.bundle.activator -->
      	<j:if test="${bi.bundleActivator!=null}">
      		<j:set var="bundle_activator" value="${bi.bundleActivator}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.activator')!=null}">
      		<j:set var="bundle_activator" value="${pom.getProperty('osgi.bundle.activator')}" />
      	</j:if>
      	<j:if test="${bundle_activator!=null}">
      		<ant:attribute name = "Bundle-Activator"      value = "${bundle_activator}"/>
      	</j:if>
      	<ant:echo>Bundle-Activator: ${bundle_activator}</ant:echo>
      	
      	<!-- osgi.bundle.category -->
      	<j:if test="${pom.getProperty('osgi.bundle.category')!=null}">
      		<ant:attribute name = "Bundle-Category"       value = "${pom.getProperty('osgi.bundle.category')}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.config -->
      	<j:if test="${pom.getProperty('osgi.bundle.config')!=null}">
      		<ant:attribute name = "Bundle-Config"         value = "${pom.getProperty('osgi.bundle.config')}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.classpath -->
      	<j:if test="${pom.getProperty('osgi.bundle.classpath')!=null}">
      		<ant:attribute name = "Bundle-Classpath"         value = "${pom.getProperty('osgi.bundle.classpath')}"/>
      	</j:if>
       	<!-- osgi.bundle.classpath alternative -->
      	<j:if test="${pom.getProperty('osgi.bundle.classpath')==null}">
      	
      		<j:forEach var="dep" items="${pom.dependencies}">
                <j:if test="${dep.getProperty('osgi.jar.bundle')=='true'}">
                    <j:set var="osgi.jar.classpath" value="${osgi.jar.classpath},${dep.artifact}" /> 
                </j:if>
            </j:forEach>
            <j:if test="${osgi.jar.classpath.length() != 0}">
                <ant:attribute name="Bundle-Classpath" value=".${osgi.jar.classpath}"/>
            </j:if>
      	</j:if>
      	
      	<!-- osgi.bundle.nativecode -->
      	<j:if test="${pom.getProperty('osgi.bundle.nativecode')!=null}">
      		<ant:attribute name = "Bundle-NativeCode"         value = "${pom.getProperty('osgi.bundle.nativecode')}"/>
      	</j:if>
      	
      	<!-- osgi.export.service -->
      	<j:if test="${pom.getProperty('osgi.export.service')!=null}">
      		<ant:attribute name = "Export-Service"         value = "${pom.getProperty('osgi.export.service')}"/>
      	</j:if>
      	
      	<!-- osgi.import.service -->
      	<j:if test="${pom.getProperty('osgi.import.service')!=null}">
      		<ant:attribute name = "Import-Service"         value = "${pom.getProperty('osgi.import.service')}"/>
      	</j:if>
      	
      	<!-- osgi.export.package -->
      	<j:if test="${bi.exportedPackages!=null}">
      		<j:set var="export_package" value="${bi.exportedPackages}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.export.package')!=null}">
      		<j:set var="export_package" value="${pom.getProperty('osgi.export.package')}" />
      	</j:if>
      	<j:if test="${export_package!=null and export_package!=''}">
      		<ant:attribute name = "Export-Package"         value = "${export_package}"/>
      	</j:if>
      	<ant:echo>Export-Package: ${export_package}</ant:echo>
      	
      	<!-- osgi.import.package -->
      	<j:if test="${bi.importedPackages!=null}">
      		<j:set var="import_package" value="${bi.importedPackages}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.import.package')!=null}">
      		<j:set var="import_package" value="${pom.getProperty('osgi.import.package')}" />
      	</j:if>
      	<j:if test="${import_package!=null and import_package!=''}">
      		<ant:attribute name = "Import-Package"         value = "${import_package}"/>
      	</j:if>
      	<ant:echo>Import-Package: ${import_package}</ant:echo>
      	
        <!-- osgi.dynimport.package -->
      	<j:if test="${pom.getProperty('osgi.dynimport.package')!=null}">
      		<j:set var="dynimport_package" value="${pom.getProperty('osgi.dynimport.package')}" />
      	</j:if>
      	<j:if test="${dynimport_package!=null and dynimport_package!=''}">
      		<ant:attribute name = "DynamicImport-Package"         value = "${dynimport_package}"/>
      	</j:if>
      	<ant:echo>DynamicImport-Package: ${dynimport_package}</ant:echo>
      	
       	
      	<!--=====================================================-->
      	<!-- OSGi-Extensions (no from manifest and OSGi standard -->
      	<!--=====================================================-->
      	<ant:attribute name = "Build-Date"            value = "${bundle.date}"/>
        
        
      </ant:manifest>
    
    
      <!--<ant:fileset dir="${maven.src.dir}"/>-->
      <ant:fileset dir="${maven.build.dest}"
        includes="**">
      </ant:fileset>

		<!-- TR: bundle libs-->
		<j:forEach var="lib" items="${pom.artifacts}">
        <j:set var="dep" value="${lib.dependency}"/>      
        <j:if test="${dep.getProperty('osgi.jar.bundle')=='true'}">
          
          <!-- 
           We know that this dep "wants" to be bundled.
          -->
                    
          <ant:echo>Bundling: ${dep.type} - ${lib.file.name}</ant:echo>                                             
          <ant:fileset dir="${lib.file.parent}">
            <ant:include name="${lib.file.name}"/>
          </ant:fileset>
          <!-- END TR: bundle libs-->
            
        </j:if>  
      </j:forEach>
      
    </ant:jar>

  </goal>
	
  <!--==================================================================-->
  <!-- Build eclipse plugin                                             -->
  <!--==================================================================-->
	<j:set var="pluginversion" value="${pom.currentVersion}" />

    <j:if test="${pluginversion.endsWith('-SNAPSHOT') == 'true'}">
      	<j:set var="pluginversion" value="${pluginversion.substring(0, pluginversion.indexOf('-SNAPSHOT'))}" />
    </j:if>
	<j:set var="plugin_id"  value="${pom.getProperty('eclipse.bundle.symbolicname')}"/>
	<j:set var="plugin_name"  value="${plugin_id}_${pluginversion}"/>
	<j:set var="plugin_name_dir"  value="${maven.build.dir}/${tmp.dir}/${plugin_name}"/>
	
	<goal name="eclipse:plugin" description="Creates an eclipse compatible plugin.">
		
		<attainGoal name="osgi:install"/>
		
		<ant:mkdir dir="${maven.build.dir}/${tmp.dir}"/>
		<ant:mkdir dir="${maven.build.dir}/${tmp.dir}/${plugin_name}"/>
		<ant:mkdir dir="${maven.build.dir}/${tmp.dir}/${plugin_name}/META-INF"/>
		
		<!-- copy jar file into plugin.name dir -->
		<ant:copy 
			file="${maven.build.dir}/${pom.artifactId}-${pom.currentVersion}.jar"
			tofile="${plugin_name_dir}/${pom.artifactId}.jar" />
		
		<attainGoal name="eclipse:manifest"/>
		
		<!--
		<ant:copy 
			file="${basedir}/eplugin/MANIFEST.MF"
			tofile="${plugin.name.dir}/META-INF/MANIFEST.MF" />
		-->
		<!-- take out the manifest the project-osgi.jar 
		<ant:unzip 
			src="${maven.build.dir}/${pom.artifactId}-${pom.currentVersion}.jar"
			dest="${plugin.name.dir}" >
			
			<ant:patternset>
				<include name="**/MANIFEST.MF"/>
			</ant:patternset>
		</ant:unzip>-->
			

		<j:forEach items="${pom.dependencies}" var="dep"> 
		
			<j:set var="plugin_include"  value="${dep.getProperty('eclipse.plugin.include')}"/>
         	<j:if test="${plugin_include == 'true'}">
				<ant:echo>include dep: ${pom.getDependencyPath(dep.getId())}</ant:echo>
				<ant:copy 
		       		file="${pom.getDependencyPath(dep.getId())}"
		       		tofile="${plugin_name_dir}/${dep.getArtifactId()}.jar"/>
			</j:if>
            
       	</j:forEach>
       
		<!-- copy plugin.xml into plugin.name dir -->
		<!--
		<ant:copy todir="${plugin_name_dir}">
			<ant:fileset dir="${basedir}/eplugin" 
				includes=".classpath,.project"/>
		</ant:copy>
		-->
		
		<!-- Licences 
		<ant:copy todir="${maven.build.dir}/${plugin.name}">
			<ant:fileset dir="${licences.dir}" />
		</ant:copy>
		-->
    	
    	<!-- generate the minimal distribution -->
		<ant:zip
      		destfile="${maven.build.dir}/${plugin_name}.zip"
      		basedir="${maven.build.dir}/${tmp.dir}/${plugin_name}"
    	/>
		
		<!-- deloy zip to local repository eclipse-plugin directory -->
		<attainGoal name="eclipse:plugin-install" />
		
		<!--<ant:delete dir="${maven.build.dir}/${tmp.dir}"/>-->
		
	</goal>
  
  
  <goal name="eclipse:plugin-install">
  	<ant:mkdir dir="${maven.repo.local}/${pom.getGroupId()}/eclipse-plugins" />

	<!-- copy zip -->
	<ant:copy 
		file="${maven.build.dir}/${plugin_name}.zip"
		tofile="${maven.repo.local}/${pom.getGroupId()}/eclipse-plugins/${plugin_name}.zip" />
  	<!-- copy directory for later import -->
  	<ant:copy todir="${maven.repo.local}/${pom.getGroupId()}/eclipse-plugins/${plugin_name}">
			<ant:fileset dir="${maven.build.dir}/${tmp.dir}/${plugin_name}" 
				includes="**"/>
	</ant:copy>
  	
  </goal>
  
  	<goal name="eclipse:manifest">

		<ant:manifest file="${plugin_name_dir}/META-INF/MANIFEST.MF">
        <ant:attribute name="Built-By" value="${user.name}"/>
        <ant:attribute name="Created-By" value="Apache Jakarta Maven"/>
        <!--<ant:attribute name="Package" value="${pom.package}"/>-->
           	

      	<!--==================================================-->
      	<!-- generate bundle-classpath attribute              -->
      	<!--==================================================-->
      	<j:set var="bundle_classpath"  value="${pom.artifactId}.jar"/>
		<j:forEach items="${pom.dependencies}" var="dep"> 
		
			<j:set var="plugin_include"  value="${dep.getProperty('eclipse.plugin.include')}"/>
         	<j:if test="${plugin_include == 'true'}">
				<j:set var="bundle_classpath"  
					value="${bundle_classpath},${dep.getArtifactId()}.jar"/>
			</j:if>
            
       	</j:forEach>
       	
      	<!--==================================================-->
      	<!-- OSGi-Extensions related to the standard manifest -->
      	<!--==================================================-->
      	<!-- osgie.manifest.mainclass -->
      	<!--
      	<j:if test="${pom.getProperty('osgie.manifest.mainclass')!=null}">
      		<ant:attribute name = "Main-Class"      value = "${pom.getProperty('osgie.manifest.mainclass')}"/>
      	</j:if>
      	-->
      	<!--==================================================-->
      	<!-- OSGi-Standard properties                         -->
      	<!--==================================================-->
      	<!-- osgi.bundle.vendor -->
      	<j:if test="${pom.organization.name!=null}">
      		<j:set var="bundle_vendor" value="${pom.organization.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.vendor')!=null}">
      		<j:set var="bundle_vendor" value = "${pom.getProperty('osgi.bundle.vendor')}"/>
      	</j:if>
      	<j:if test="${bundle_vendor!=null}">
      		<ant:attribute name = "Bundle-Vendor"      value = "${bundle_vendor}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.docurl -->
      	<j:if test="${pom.organization.url!=null}">
      		<j:set var="bundle_docurl" value="${pom.organization.url}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.docurl')!=null}">
      		<j:set var="bundle_docurl" value = "${pom.getProperty('osgi.bundle.docurl')}"/>
      	</j:if>
      	<j:if test="${bundle_docurl!=null}">
      		<ant:attribute name = "Bundle-DocURL"      value = "${bundle_docurl}"/>
      	</j:if>      	
      	
      	<!-- osgi.bundle.version -->
      	<j:if test="${pom.currentVersion!=null}">
      		<j:set var="bundle_version" value="${pom.currentVersion}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.version')!=null}">
      		<j:set var="bundle_version" value="${pom.getProperty('osgi.bundle.version')}" />
      	</j:if>
      	<j:if test="${bundle_version!=null}">
      		<ant:attribute name = "Bundle-Version"      value = "${bundle_version}"/>
      	</j:if>
      	

      	<!-- osgi.bundle.name -->
      	<j:if test="${pom.name!=null}">
      		<j:set var="bundle_name" value="${pom.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.name')!=null}">
      		<j:set var="bundle_name" value = "${pom.getProperty('osgi.bundle.name')}"/>
      	</j:if>
      	<j:if test="${bundle_name!=null}">
      		<ant:attribute name = "Bundle-Name"      value = "${bundle_name}"/>
      	</j:if>
      	
      	<!-- eclipse.bundle.symbolicname -->
      	<j:if test="${pom.name!=null}">
      		<j:set var="symbolic_name" value="${pom.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('eclipse.bundle.symbolicname')!=null}">
      		<j:set var="symbolic_name" value = "${pom.getProperty('eclipse.bundle.symbolicname')}"/>
      	</j:if>
      	<j:if test="${symbolic_name!=null}">
      		<ant:attribute name = "Bundle-SymbolicName"      value = "${symbolic_name}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.description -->
      	<j:if test="${pom.shortDescription!=null}">
      		<j:set var="bundle_desc" value="${pom.shortDescription}" />
      	</j:if>
      	<j:if test="${pom.getProperty('osgi.bundle.description')!=null}">
      		<j:set var="bundle_desc" value = "${pom.getProperty('osgi.bundle.description')}"/>
      	</j:if>
      	<j:if test="${bundle_desc!=null}">
      		<ant:attribute name = "Bundle-Description"      value = "${bundle_desc}"/>
      	</j:if>
      	      	
      	<!-- osgi.bundle.activator -->
      	<j:if test="${bi.bundleActivator!=null}">
      		<j:set var="bundle_activator" value="${bi.bundleActivator}" />
      	</j:if>
      	<j:if test="${pom.getProperty('eclipse.bundle.activator')!=null}">
      		<j:set var="bundle_activator" value="${pom.getProperty('eclipse.bundle.activator')}" />
      	</j:if>
      	<j:if test="${bundle_activator!=null}">
      		<ant:attribute name = "Bundle-Activator"      value = "${bundle_activator}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.category -->
      	<j:if test="${pom.getProperty('osgi.bundle.category')!=null}">
      		<ant:attribute name = "Bundle-Category"       value = "${pom.getProperty('osgi.bundle.category')}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.config -->
      	<j:if test="${pom.getProperty('osgi.bundle.config')!=null}">
      		<ant:attribute name = "Bundle-Config"         value = "${pom.getProperty('osgi.bundle.config')}"/>
      	</j:if>
      	
      	<!-- osgi.bundle.classpath -->
      	<!--<j:if test="${pom.getProperty('osgi.bundle.classpath')!=null}">
      		<ant:attribute name = "Bundle-Classpath"         value = "${pom.getProperty('osgi.bundle.classpath')}"/>
      	</j:if>-->
      	
      	<!-- osgi.bundle.nativecode -->
      	<j:if test="${pom.getProperty('osgi.bundle.nativecode')!=null}">
      		<ant:attribute name = "Bundle-NativeCode"         value = "${pom.getProperty('osgi.bundle.nativecode')}"/>
      	</j:if>
      	
      	<!-- eclipse.export.service -->
      	<j:if test="${pom.getProperty('eclipse.export.service')!=null}">
      		<ant:attribute name = "Export-Service"         value = "${pom.getProperty('eclipse.export.service')}"/>
      	</j:if>
      	
      	<!-- eclipse.import.service -->
      	<j:if test="${pom.getProperty('eclipse.import.service')!=null}">
      		<ant:attribute name = "Import-Service"         value = "${pom.getProperty('eclipse.import.service')}"/>
      	</j:if>
      	
      	<!-- eclipse.export.package -->
      	<j:if test="${bi.exportedPackages!=null}">
      		<j:set var="export_package" value="${bi.exportedPackages}" />
      	</j:if>
      	<j:if test="${pom.getProperty('eclipse.export.package')!=null}">
      		<j:set var="export_package" value="${pom.getProperty('eclipse.export.package')}" />
      	</j:if>
      	<j:if test="${export_package!=null and export_package!=''}">
      		<ant:attribute name = "Export-Package"         value = "${export_package}"/>
      	</j:if>
      	
      	<!-- eclipse.import.package -->
      	<j:if test="${bi.importedPackages!=null}">
      		<j:set var="import_package" value="${bi.importedPackages}" />
      	</j:if>
      	<j:if test="${pom.getProperty('eclipse.import.package')!=null}">
      		<j:set var="import_package" value="${pom.getProperty('eclipse.import.package')}" />
      	</j:if>
      	<j:if test="${import_package!=null and import_package!=''}">
      		<ant:attribute name = "Import-Package"         value = "${import_package}"/>
      	</j:if>
      	
        <!-- osgi.dynimport.package -->
      	<j:if test="${pom.getProperty('osgi.dynimport.package')!=null}">
      		<j:set var="dynimport_package" value="${pom.getProperty('osgi.dynimport.package')}" />
      	</j:if>
      	<j:if test="${dynimport_package!=null and dynimport_package!=''}">
      		<ant:attribute name = "DynamicImport-Package"         value = "${dynimport_package}"/>
      	</j:if>
      	
      	<!-- bundle.classpath -->
      	<ant:attribute name = "Bundle-ClassPath"   value = ".,${bundle_classpath}"/>
      	
      	<!-- eclipse.require.bundle -->
      	<j:if test="${pom.name!=null}">
      		<j:set var="require_bundle" value="${pom.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('eclipse.require.bundle')!=null}">
      		<j:set var="require_bundle" value = "${pom.getProperty('eclipse.require.bundle')}"/>
      	</j:if>
      	<j:if test="${require_bundle!=null}">
      		<ant:attribute name = "Require-Bundle"      value = "${require_bundle}"/>
      	</j:if>
      	
      	<!-- eclipse.autostart -->
      	<j:if test="${pom.name!=null}">
      		<j:set var="autostart" value="${pom.name}" />
      	</j:if>
      	<j:if test="${pom.getProperty('eclipse.autostart')!=null}">
      		<j:set var="autostart" value = "${pom.getProperty('eclipse.autostart')}"/>
      	</j:if>
      	<j:if test="${autostart!=null}">
      		<ant:attribute name = "Eclipse-AutoStart"      value = "${autostart}"/>
      	</j:if>
      	
      	<!--=====================================================-->
      	<!-- OSGi-Extensions (no from manifest and OSGi standard -->
      	<!--=====================================================-->
      	<ant:attribute name = "Build-Date"            value = "${bundle.date}"/>
        
        
      </ant:manifest>
   
   </goal>
	
	<!--=====================================================-->
    <!-- thirdparty package generation                       -->
    <!--=====================================================-->
	<goal name="osgi:thirdparty-jar" description="generate an osgi package out of a third-party package">
		
		<bundleinfo:thirdparty
			var="bi"
			thirdparty="jar"
			bundleDir="${basedir}"
			repositoryLocal="${maven.repo.local}"
		/>
		<ant:echo>osgi deployed: ${bi.deployedOSGiJar}</ant:echo>
		<ant:echo>Export-Package: ${bi.exportedPackages}</ant:echo>
		<ant:echo>Import-Package: ${bi.importedPackages}</ant:echo>
	</goal>
	
	<goal name="osgi:thirdparty-deploy" description="generate an osgi package out of a third-party package and deploy it in .maven/repository">
		
		<bundleinfo:thirdparty
			var="bi"
			thirdparty="deploy"
			bundleDir="${basedir}"
			repositoryLocal="${maven.repo.local}"
		/>
			
		<ant:echo>osgi deployed: ${bi.deployedOSGiJar}</ant:echo>
		<ant:echo>Export-Package: ${bi.exportedPackages}</ant:echo>
		<ant:echo>Import-Package: ${bi.importedPackages}</ant:echo>

	</goal>

	<goal name="osgi:thirdparty-obr" description="generate a separate obr file for an existing osgi third-party jar">
	
		<bundleinfo:thirdparty-obr
			var="bi"
			thirdparty="jar"
			bundleDir="${basedir}"
			repositoryLocal="${maven.repo.local}"
		/>
		
	</goal>
	
	
	
</project>